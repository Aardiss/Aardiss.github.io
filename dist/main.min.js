"use strict";!function(Y){var Z={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};Y.fn.bxSlider=function(e){if(0===this.length)return this;if(1<this.length)return this.each(function(){Y(this).bxSlider(e)}),this;var g={},u=this,s=Y(window).width(),o=Y(window).height();if(!Y(u).data("bxSlider")){var n=function(){Y(u).data("bxSlider")||(g.settings=Y.extend({},Z,e),g.settings.slideWidth=parseInt(g.settings.slideWidth),g.children=u.children(g.settings.slideSelector),g.children.length<g.settings.minSlides&&(g.settings.minSlides=g.children.length),g.children.length<g.settings.maxSlides&&(g.settings.maxSlides=g.children.length),g.settings.randomStart&&(g.settings.startSlide=Math.floor(Math.random()*g.children.length)),g.active={index:g.settings.startSlide},g.carousel=1<g.settings.minSlides||1<g.settings.maxSlides,g.carousel&&(g.settings.preloadImages="all"),g.minThreshold=g.settings.minSlides*g.settings.slideWidth+(g.settings.minSlides-1)*g.settings.slideMargin,g.maxThreshold=g.settings.maxSlides*g.settings.slideWidth+(g.settings.maxSlides-1)*g.settings.slideMargin,g.working=!1,g.controls={},g.interval=null,g.animProp="vertical"===g.settings.mode?"top":"left",g.usingCSS=g.settings.useCSS&&"fade"!==g.settings.mode&&function(){for(var t=document.createElement("div"),e=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],i=0;i<e.length;i++)if(void 0!==t.style[e[i]])return g.cssPrefix=e[i].replace("Perspective","").toLowerCase(),g.animProp="-"+g.cssPrefix+"-transform",!0;return!1}(),"vertical"===g.settings.mode&&(g.settings.maxSlides=g.settings.minSlides),u.data("origStyle",u.attr("style")),u.children(g.settings.slideSelector).each(function(){Y(this).data("origStyle",Y(this).attr("style"))}),t())},t=function(){var t=g.children.eq(g.settings.startSlide);u.wrap('<div class="'+g.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),g.viewport=u.parent(),g.settings.ariaLive&&!g.settings.ticker&&g.viewport.attr("aria-live","polite"),g.loader=Y('<div class="bx-loading" />'),g.viewport.prepend(g.loader),u.css({width:"horizontal"===g.settings.mode?1e3*g.children.length+215+"%":"auto",position:"relative"}),g.usingCSS&&g.settings.easing?u.css("-"+g.cssPrefix+"-transition-timing-function",g.settings.easing):g.settings.easing||(g.settings.easing="swing"),g.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),g.viewport.parent().css({maxWidth:l()}),g.children.css({float:"horizontal"===g.settings.mode?"left":"none",listStyle:"none",position:"relative"}),g.children.css("width",d()),"horizontal"===g.settings.mode&&0<g.settings.slideMargin&&g.children.css("marginRight",g.settings.slideMargin),"vertical"===g.settings.mode&&0<g.settings.slideMargin&&g.children.css("marginBottom",g.settings.slideMargin),"fade"===g.settings.mode&&(g.children.css({position:"absolute",zIndex:0,display:"none"}),g.children.eq(g.settings.startSlide).css({zIndex:g.settings.slideZIndex,display:"block"})),g.controls.el=Y('<div class="bx-controls" />'),g.settings.captions&&C(),g.active.last=g.settings.startSlide===v()-1,g.settings.video&&u.fitVids(),"none"===g.settings.preloadImages?t=null:"all"!==g.settings.preloadImages&&!g.settings.ticker||(t=g.children),g.settings.ticker?g.settings.pager=!1:(g.settings.controls&&w(),g.settings.auto&&g.settings.autoControls&&b(),g.settings.pager&&S(),(g.settings.controls||g.settings.autoControls||g.settings.pager)&&g.viewport.after(g.controls.el)),null===t?a():r(t,a)},r=function(t,e){var i=t.find('img:not([src=""]), iframe').length,n=0;0!==i?t.find('img:not([src=""]), iframe').each(function(){Y(this).one("load error",function(){++n===i&&e()}).each(function(){!this.complete&&""!=this.src||Y(this).trigger("load")})}):e()},a=function(){var t,e,i;g.settings.infiniteLoop&&"fade"!==g.settings.mode&&!g.settings.ticker&&(t="vertical"===g.settings.mode?g.settings.minSlides:g.settings.maxSlides,e=g.children.slice(0,t).clone(!0).addClass("bx-clone"),i=g.children.slice(-t).clone(!0).addClass("bx-clone"),g.settings.ariaHidden&&(e.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),u.append(e).prepend(i)),g.loader.remove(),f(),"vertical"===g.settings.mode&&(g.settings.adaptiveHeight=!0),g.viewport.height(p()),u.redrawSlider(),g.settings.onSliderLoad.call(u,g.active.index),g.initialized=!0,g.settings.responsive&&Y(window).on("resize",B),g.settings.auto&&g.settings.autoStart&&(1<v()||g.settings.autoSlideForOnePage)&&q(),g.settings.ticker&&L(),g.settings.pager&&P(g.settings.startSlide),g.settings.controls&&$(),g.settings.touchEnabled&&!g.settings.ticker&&W(),g.settings.keyboardEnabled&&!g.settings.ticker&&Y(document).keydown(H)},p=function(){var e=0,t=Y();if("vertical"===g.settings.mode||g.settings.adaptiveHeight)if(g.carousel){var n=1===g.settings.moveSlides?g.active.index:g.active.index*h(),t=g.children.eq(n);for(i=1;i<=g.settings.maxSlides-1;i++)t=n+i>=g.children.length?t.add(g.children.eq(i-1)):t.add(g.children.eq(n+i))}else t=g.children.eq(g.active.index);else t=g.children;return"vertical"===g.settings.mode?(t.each(function(t){e+=Y(this).outerHeight()}),0<g.settings.slideMargin&&(e+=g.settings.slideMargin*(g.settings.minSlides-1))):e=Math.max.apply(Math,t.map(function(){return Y(this).outerHeight(!1)}).get()),"border-box"===g.viewport.css("box-sizing")?e+=parseFloat(g.viewport.css("padding-top"))+parseFloat(g.viewport.css("padding-bottom"))+parseFloat(g.viewport.css("border-top-width"))+parseFloat(g.viewport.css("border-bottom-width")):"padding-box"===g.viewport.css("box-sizing")&&(e+=parseFloat(g.viewport.css("padding-top"))+parseFloat(g.viewport.css("padding-bottom"))),e},l=function(){var t="100%";return 0<g.settings.slideWidth&&(t="horizontal"===g.settings.mode?g.settings.maxSlides*g.settings.slideWidth+(g.settings.maxSlides-1)*g.settings.slideMargin:g.settings.slideWidth),t},d=function(){var t=g.settings.slideWidth,e=g.viewport.width();if(0===g.settings.slideWidth||g.settings.slideWidth>e&&!g.carousel||"vertical"===g.settings.mode)t=e;else if(1<g.settings.maxSlides&&"horizontal"===g.settings.mode){if(e>g.maxThreshold)return t;e<g.minThreshold?t=(e-g.settings.slideMargin*(g.settings.minSlides-1))/g.settings.minSlides:g.settings.shrinkItems&&(t=Math.floor((e+g.settings.slideMargin)/Math.ceil((e+g.settings.slideMargin)/(t+g.settings.slideMargin))-g.settings.slideMargin))}return t},c=function(){var t,e=1;return"horizontal"===g.settings.mode&&0<g.settings.slideWidth?e=g.viewport.width()<g.minThreshold?g.settings.minSlides:g.viewport.width()>g.maxThreshold?g.settings.maxSlides:(t=g.children.first().width()+g.settings.slideMargin,Math.floor((g.viewport.width()+g.settings.slideMargin)/t)||1):"vertical"===g.settings.mode&&(e=g.settings.minSlides),e},v=function(){var t=0,e=0,i=0;if(0<g.settings.moveSlides){if(!g.settings.infiniteLoop){for(;e<g.children.length;)++t,e=i+c(),i+=g.settings.moveSlides<=c()?g.settings.moveSlides:c();return i}t=Math.ceil(g.children.length/h())}else t=Math.ceil(g.children.length/c());return t},h=function(){return 0<g.settings.moveSlides&&g.settings.moveSlides<=c()?g.settings.moveSlides:c()},f=function(){var t,e,i;g.children.length>g.settings.maxSlides&&g.active.last&&!g.settings.infiniteLoop?"horizontal"===g.settings.mode?(t=(e=g.children.last()).position(),m(-(t.left-(g.viewport.width()-e.outerWidth())),"reset",0)):"vertical"===g.settings.mode&&(i=g.children.length-g.settings.minSlides,t=g.children.eq(i).position(),m(-t.top,"reset",0)):(t=g.children.eq(g.active.index*h()).position(),g.active.index===v()-1&&(g.active.last=!0),void 0!==t&&("horizontal"===g.settings.mode?m(-t.left,"reset",0):"vertical"===g.settings.mode&&m(-t.top,"reset",0)))},m=function e(t,i,n,s){var o,r;g.usingCSS?(r="vertical"===g.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",u.css("-"+g.cssPrefix+"-transition-duration",n/1e3+"s"),"slide"===i?(u.css(g.animProp,r),0!==n?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){Y(t.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),M())}):M()):"reset"===i?u.css(g.animProp,r):"ticker"===i&&(u.css("-"+g.cssPrefix+"-transition-timing-function","linear"),u.css(g.animProp,r),0!==n?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){Y(t.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),e(s.resetValue,"reset",0),A())}):(e(s.resetValue,"reset",0),A()))):((o={})[g.animProp]=t,"slide"===i?u.animate(o,n,g.settings.easing,function(){M()}):"reset"===i?u.css(g.animProp,t):"ticker"===i&&u.animate(o,n,"linear",function(){e(s.resetValue,"reset",0),A()}))},x=function(){for(var t="",e="",i=v(),n=0;n<i;n++)e="",g.settings.buildPager&&Y.isFunction(g.settings.buildPager)||g.settings.pagerCustom?(e=g.settings.buildPager(n),g.pagerEl.addClass("bx-custom-pager")):(e=n+1,g.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+n+'" class="bx-pager-link">'+e+"</a></div>";g.pagerEl.html(t)},S=function(){g.settings.pagerCustom?g.pagerEl=Y(g.settings.pagerCustom):(g.pagerEl=Y('<div class="bx-pager" />'),g.settings.pagerSelector?Y(g.settings.pagerSelector).html(g.pagerEl):g.controls.el.addClass("bx-has-pager").append(g.pagerEl),x()),g.pagerEl.on("click touchend","a",E)},w=function(){g.controls.next=Y('<a class="bx-next" href="">'+g.settings.nextText+"</a>"),g.controls.prev=Y('<a class="bx-prev" href="">'+g.settings.prevText+"</a>"),g.controls.next.on("click touchend",_),g.controls.prev.on("click touchend",k),g.settings.nextSelector&&Y(g.settings.nextSelector).append(g.controls.next),g.settings.prevSelector&&Y(g.settings.prevSelector).append(g.controls.prev),g.settings.nextSelector||g.settings.prevSelector||(g.controls.directionEl=Y('<div class="bx-controls-direction" />'),g.controls.directionEl.append(g.controls.prev).append(g.controls.next),g.controls.el.addClass("bx-has-controls-direction").append(g.controls.directionEl))},b=function(){g.controls.start=Y('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+g.settings.startText+"</a></div>"),g.controls.stop=Y('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+g.settings.stopText+"</a></div>"),g.controls.autoEl=Y('<div class="bx-controls-auto" />'),g.controls.autoEl.on("click",".bx-start",y),g.controls.autoEl.on("click",".bx-stop",T),g.settings.autoControlsCombine?g.controls.autoEl.append(g.controls.start):g.controls.autoEl.append(g.controls.start).append(g.controls.stop),g.settings.autoControlsSelector?Y(g.settings.autoControlsSelector).html(g.controls.autoEl):g.controls.el.addClass("bx-has-controls-auto").append(g.controls.autoEl),I(g.settings.autoStart?"stop":"start")},C=function(){g.children.each(function(t){var e=Y(this).find("img:first").attr("title");void 0!==e&&(""+e).length&&Y(this).append('<div class="bx-caption"><span>'+e+"</span></div>")})},_=function(t){t.preventDefault(),g.controls.el.hasClass("disabled")||(g.settings.auto&&g.settings.stopAutoOnClick&&u.stopAuto(),u.goToNextSlide())},k=function(t){t.preventDefault(),g.controls.el.hasClass("disabled")||(g.settings.auto&&g.settings.stopAutoOnClick&&u.stopAuto(),u.goToPrevSlide())},y=function(t){u.startAuto(),t.preventDefault()},T=function(t){u.stopAuto(),t.preventDefault()},E=function(t){var e,i;t.preventDefault(),g.controls.el.hasClass("disabled")||(g.settings.auto&&g.settings.stopAutoOnClick&&u.stopAuto(),void 0!==(e=Y(t.currentTarget)).attr("data-slide-index")&&(i=parseInt(e.attr("data-slide-index")))!==g.active.index&&u.goToSlide(i))},P=function(i){var t=g.children.length;if("short"===g.settings.pagerType)return 1<g.settings.maxSlides&&(t=Math.ceil(g.children.length/g.settings.maxSlides)),void g.pagerEl.html(i+1+g.settings.pagerShortSeparator+t);g.pagerEl.find("a").removeClass("active"),g.pagerEl.each(function(t,e){Y(e).find("a").eq(i).addClass("active")})},M=function(){var t;g.settings.infiniteLoop&&(t="",0===g.active.index?t=g.children.eq(0).position():g.active.index===v()-1&&g.carousel?t=g.children.eq((v()-1)*h()).position():g.active.index===g.children.length-1&&(t=g.children.eq(g.children.length-1).position()),t&&("horizontal"===g.settings.mode?m(-t.left,"reset",0):"vertical"===g.settings.mode&&m(-t.top,"reset",0))),g.working=!1,g.settings.onSlideAfter.call(u,g.children.eq(g.active.index),g.oldIndex,g.active.index)},I=function(t){g.settings.autoControlsCombine?g.controls.autoEl.html(g.controls[t]):(g.controls.autoEl.find("a").removeClass("active"),g.controls.autoEl.find("a:not(.bx-"+t+")").addClass("active"))},$=function(){1===v()?(g.controls.prev.addClass("disabled"),g.controls.next.addClass("disabled")):!g.settings.infiniteLoop&&g.settings.hideControlOnEnd&&(0===g.active.index?(g.controls.prev.addClass("disabled"),g.controls.next.removeClass("disabled")):g.active.index===v()-1?(g.controls.next.addClass("disabled"),g.controls.prev.removeClass("disabled")):(g.controls.prev.removeClass("disabled"),g.controls.next.removeClass("disabled")))},z=function(){u.startAuto()},D=function(){u.stopAuto()},q=function(){0<g.settings.autoDelay?setTimeout(u.startAuto,g.settings.autoDelay):(u.startAuto(),Y(window).focus(z).blur(D)),g.settings.autoHover&&u.hover(function(){g.interval&&(u.stopAuto(!0),g.autoPaused=!0)},function(){g.autoPaused&&(u.startAuto(!0),g.autoPaused=null)})},L=function(){var t,e,i,n,s,o,r,a,l=0;"next"===g.settings.autoDirection?u.append(g.children.clone().addClass("bx-clone")):(u.prepend(g.children.clone().addClass("bx-clone")),t=g.children.first().position(),l="horizontal"===g.settings.mode?-t.left:-t.top),m(l,"reset",0),g.settings.pager=!1,g.settings.controls=!1,g.settings.autoControls=!1,g.settings.tickerHover&&(g.usingCSS?(n="horizontal"===g.settings.mode?4:5,g.viewport.hover(function(){e=u.css("-"+g.cssPrefix+"-transform"),i=parseFloat(e.split(",")[n]),m(i,"reset",0)},function(){a=0,g.children.each(function(t){a+="horizontal"===g.settings.mode?Y(this).outerWidth(!0):Y(this).outerHeight(!0)}),s=g.settings.speed/a,o="horizontal"===g.settings.mode?"left":"top",r=s*(a-Math.abs(parseInt(i))),A(r)})):g.viewport.hover(function(){u.stop()},function(){a=0,g.children.each(function(t){a+="horizontal"===g.settings.mode?Y(this).outerWidth(!0):Y(this).outerHeight(!0)}),s=g.settings.speed/a,o="horizontal"===g.settings.mode?"left":"top",r=s*(a-Math.abs(parseInt(u.css(o)))),A(r)})),A()},A=function(t){var e,i,n=t||g.settings.speed,s={left:0,top:0},o={left:0,top:0};"next"===g.settings.autoDirection?s=u.find(".bx-clone").first().position():o=g.children.first().position(),e="horizontal"===g.settings.mode?-s.left:-s.top,i="horizontal"===g.settings.mode?-o.left:-o.top,m(e,"ticker",n,{resetValue:i})},H=function(t){var e,i,n,s,o=document.activeElement.tagName.toLowerCase();if(null==new RegExp(o,["i"]).exec("input|textarea")&&(e=u,i=Y(window),n={top:i.scrollTop(),left:i.scrollLeft()},s=e.offset(),n.right=n.left+i.width(),n.bottom=n.top+i.height(),s.right=s.left+e.outerWidth(),s.bottom=s.top+e.outerHeight(),!(n.right<s.left||n.left>s.right||n.bottom<s.top||n.top>s.bottom))){if(39===t.keyCode)return _(t),!1;if(37===t.keyCode)return k(t),!1}},W=function(){g.touch={start:{x:0,y:0},end:{x:0,y:0}},g.viewport.on("touchstart MSPointerDown pointerdown",O),g.viewport.on("click",".bxslider a",function(t){g.viewport.hasClass("click-disabled")&&(t.preventDefault(),g.viewport.removeClass("click-disabled"))})},O=function(t){if("touchstart"===t.type||0===t.button)if(t.preventDefault(),g.controls.el.addClass("disabled"),g.working)g.controls.el.removeClass("disabled");else{g.touch.originalPos=u.position();var e=t.originalEvent,i=void 0!==e.changedTouches?e.changedTouches:[e];if("function"==typeof PointerEvent&&void 0===e.pointerId)return;g.touch.start.x=i[0].pageX,g.touch.start.y=i[0].pageY,g.viewport.get(0).setPointerCapture&&(g.pointerId=e.pointerId,g.viewport.get(0).setPointerCapture(g.pointerId)),g.originalClickTarget=e.originalTarget||e.target,g.originalClickButton=e.button,g.originalClickButtons=e.buttons,g.originalEventType=e.type,g.hasMove=!1,g.viewport.on("touchmove MSPointerMove pointermove",F),g.viewport.on("touchend MSPointerUp pointerup",V),g.viewport.on("MSPointerCancel pointercancel",N)}},N=function t(e){e.preventDefault(),m(g.touch.originalPos.left,"reset",0),g.controls.el.removeClass("disabled"),g.viewport.off("MSPointerCancel pointercancel",t),g.viewport.off("touchmove MSPointerMove pointermove",F),g.viewport.off("touchend MSPointerUp pointerup",V),g.viewport.get(0).releasePointerCapture&&g.viewport.get(0).releasePointerCapture(g.pointerId)},F=function(t){var e=t.originalEvent,i=void 0!==e.changedTouches?e.changedTouches:[e],n=Math.abs(i[0].pageX-g.touch.start.x),s=Math.abs(i[0].pageY-g.touch.start.y),o=0,r=0;g.hasMove=!0,(s<3*n&&g.settings.preventDefaultSwipeX||n<3*s&&g.settings.preventDefaultSwipeY)&&t.preventDefault(),"touchmove"!==t.type&&t.preventDefault(),"fade"!==g.settings.mode&&g.settings.oneToOneTouch&&(o="horizontal"===g.settings.mode?(r=i[0].pageX-g.touch.start.x,g.touch.originalPos.left+r):(r=i[0].pageY-g.touch.start.y,g.touch.originalPos.top+r),m(o,"reset",0))},V=function t(e){e.preventDefault(),g.viewport.off("touchmove MSPointerMove pointermove",F),g.controls.el.removeClass("disabled");var i=e.originalEvent,n=void 0!==i.changedTouches?i.changedTouches:[i],s=0,o=0;g.touch.end.x=n[0].pageX,g.touch.end.y=n[0].pageY,"fade"===g.settings.mode?(o=Math.abs(g.touch.start.x-g.touch.end.x))>=g.settings.swipeThreshold&&(g.touch.start.x>g.touch.end.x?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):(s="horizontal"===g.settings.mode?(o=g.touch.end.x-g.touch.start.x,g.touch.originalPos.left):(o=g.touch.end.y-g.touch.start.y,g.touch.originalPos.top),(g.settings.infiniteLoop||!(0===g.active.index&&0<o||g.active.last&&o<0))&&Math.abs(o)>=g.settings.swipeThreshold?(o<0?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):m(s,"reset",200)),g.viewport.off("touchend MSPointerUp pointerup",t),g.viewport.get(0).releasePointerCapture&&g.viewport.get(0).releasePointerCapture(g.pointerId),!1!==g.hasMove||0!==g.originalClickButton&&"touchstart"!==g.originalEventType||Y(g.originalClickTarget).trigger({type:"click",button:g.originalClickButton,buttons:g.originalClickButtons})},B=function t(e){var i,n;g.initialized&&(g.working?window.setTimeout(t,10):(i=Y(window).width(),n=Y(window).height(),s===i&&o===n||(s=i,o=n,u.redrawSlider(),g.settings.onSliderResize.call(u,g.active.index))))},X=function(t){var e=c();g.settings.ariaHidden&&!g.settings.ticker&&(g.children.attr("aria-hidden","true"),g.children.slice(t,t+e).attr("aria-hidden","false"))};return u.goToSlide=function(t,e){var i,n,s,o,r,a=!0,l=0,d={left:0,top:0},c=null;if(g.oldIndex=g.active.index,g.active.index=(r=t)<0?g.settings.infiniteLoop?v()-1:g.active.index:r>=v()?g.settings.infiniteLoop?0:g.active.index:r,!g.working&&g.active.index!==g.oldIndex){if(g.working=!0,void 0!==(a=g.settings.onSlideBefore.call(u,g.children.eq(g.active.index),g.oldIndex,g.active.index))&&!a)return g.active.index=g.oldIndex,void(g.working=!1);"next"===e?g.settings.onSlideNext.call(u,g.children.eq(g.active.index),g.oldIndex,g.active.index)||(a=!1):"prev"===e&&(g.settings.onSlidePrev.call(u,g.children.eq(g.active.index),g.oldIndex,g.active.index)||(a=!1)),g.active.last=g.active.index>=v()-1,(g.settings.pager||g.settings.pagerCustom)&&P(g.active.index),g.settings.controls&&$(),"fade"===g.settings.mode?(g.settings.adaptiveHeight&&g.viewport.height()!==p()&&g.viewport.animate({height:p()},g.settings.adaptiveHeightSpeed),g.children.filter(":visible").fadeOut(g.settings.speed).css({zIndex:0}),g.children.eq(g.active.index).css("zIndex",g.settings.slideZIndex+1).fadeIn(g.settings.speed,function(){Y(this).css("zIndex",g.settings.slideZIndex),M()})):(g.settings.adaptiveHeight&&g.viewport.height()!==p()&&g.viewport.animate({height:p()},g.settings.adaptiveHeightSpeed),!g.settings.infiniteLoop&&g.carousel&&g.active.last?"horizontal"===g.settings.mode?(d=(c=g.children.eq(g.children.length-1)).position(),l=g.viewport.width()-c.outerWidth()):(i=g.children.length-g.settings.minSlides,d=g.children.eq(i).position()):g.carousel&&g.active.last&&"prev"===e?(n=1===g.settings.moveSlides?g.settings.maxSlides-h():(v()-1)*h()-(g.children.length-g.settings.maxSlides),d=(c=u.children(".bx-clone").eq(n)).position()):"next"===e&&0===g.active.index?(d=u.find("> .bx-clone").eq(g.settings.maxSlides).position(),g.active.last=!1):0<=t&&(o=t*parseInt(h()),d=g.children.eq(o).position()),void 0!==d&&(s="horizontal"===g.settings.mode?-(d.left-l):-d.top,m(s,"slide",g.settings.speed)),g.working=!1),g.settings.ariaHidden&&X(g.active.index*h())}},u.goToNextSlide=function(){var t;!g.settings.infiniteLoop&&g.active.last||!0!==g.working&&(t=parseInt(g.active.index)+1,u.goToSlide(t,"next"))},u.goToPrevSlide=function(){var t;!g.settings.infiniteLoop&&0===g.active.index||!0===g.working||(t=parseInt(g.active.index)-1,u.goToSlide(t,"prev"))},u.startAuto=function(t){g.interval||(g.interval=setInterval(function(){"next"===g.settings.autoDirection?u.goToNextSlide():u.goToPrevSlide()},g.settings.pause),g.settings.onAutoChange.call(u,!0),g.settings.autoControls&&!0!==t&&I("stop"))},u.stopAuto=function(t){g.autoPaused&&(g.autoPaused=!1),g.interval&&(clearInterval(g.interval),g.interval=null,g.settings.onAutoChange.call(u,!1),g.settings.autoControls&&!0!==t&&I("start"))},u.getCurrentSlide=function(){return g.active.index},u.getCurrentSlideElement=function(){return g.children.eq(g.active.index)},u.getSlideElement=function(t){return g.children.eq(t)},u.getSlideCount=function(){return g.children.length},u.isWorking=function(){return g.working},u.redrawSlider=function(){g.children.add(u.find(".bx-clone")).outerWidth(d()),g.viewport.css("height",p()),g.settings.ticker||f(),g.active.last&&(g.active.index=v()-1),g.active.index>=v()&&(g.active.last=!0),g.settings.pager&&!g.settings.pagerCustom&&(x(),P(g.active.index)),g.settings.ariaHidden&&X(g.active.index*h())},u.destroySlider=function(){g.initialized&&(g.initialized=!1,Y(".bx-clone",this).remove(),g.children.each(function(){void 0!==Y(this).data("origStyle")?Y(this).attr("style",Y(this).data("origStyle")):Y(this).removeAttr("style")}),void 0!==Y(this).data("origStyle")?this.attr("style",Y(this).data("origStyle")):Y(this).removeAttr("style"),Y(this).unwrap().unwrap(),g.controls.el&&g.controls.el.remove(),g.controls.next&&g.controls.next.remove(),g.controls.prev&&g.controls.prev.remove(),g.pagerEl&&g.settings.controls&&!g.settings.pagerCustom&&g.pagerEl.remove(),Y(".bx-caption",this).remove(),g.controls.autoEl&&g.controls.autoEl.remove(),clearInterval(g.interval),g.settings.responsive&&Y(window).off("resize",B),g.settings.keyboardEnabled&&Y(document).off("keydown",H),Y(this).removeData("bxSlider"),Y(window).off("blur",D).off("focus",z))},u.reloadSlider=function(t){void 0!==t&&(e=t),u.destroySlider(),n(),Y(u).data("bxSlider",this)},n(),Y(u).data("bxSlider",this),this}}}(jQuery),function(){function a(t){var e=t.find(".command__profile-panel");t.find(".command__profile-name").removeClass("active"),e.height(0)}$(".command__profile-name").click(function(t){var e,i,n,s,o=$(t.currentTarget),r=o.closest(".command__list");o.hasClass("active")?a(r):(a(r),i=(e=o).closest(".command__profile"),n=i.find(".command__profile-panel"),s=i.find(".command__profile-block").height(),e.addClass("active"),n.height(s))})}(),function(){function o(t){var e=t.find(".assort__item"),i=t.find(".assort__wrap");e.removeClass("assort-active"),i.width(0)}function r(t){var e,i,n,s,o,r,a,l,d=t.find(".assort__wrap"),c=(e=t,i=0,n=$(window).width(),s=e.closest(".assort__list").find(".assort__trigger"),o=s.width()*s.length,r=e.find(".assort__content"),a=parseInt(r.css("padding-left")),l=parseInt(r.css("padding-right")),{container:i=window.matchMedia("(max-width: 768px)").matches?n-o:500,textContainer:i-a-l}),g=t.find(".assort__content");t.addClass("assort-active"),d.width(c.container),g.width(c.textContainer)}$(".assort__trigger").on("click",function(t){t.preventDefault();var e=$(t.currentTarget),i=e.closest(".assort__item"),n=i.hasClass("assort-active"),s=e.closest(".assort__list");n?o(s):(o(s),r(i))}),$(".assort__close").on("click",function(t){t.preventDefault(),o($(".assort__list"))})}(),function(){var t;ymaps.ready(function(){t=new ymaps.Map("map",{center:[55.749536,37.620857],zoom:13.5,controls:[]});var e=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"../img/icons/marker.svg",iconImageSize:[46,57],iconImageOffset:[-35,-52]});[[55.756832,37.586203],[55.757425,37.627059],[55.744799,37.581622],[55.749532,37.607942]].forEach(function(t){e.add(new ymaps.Placemark(t))}),t.geoObjects.add(e),t.behaviors.disable("scrollZoom")})}(),function(){var t=document.querySelector(".hamburger"),e=document.querySelector(".hamburger__menu");document.querySelector(".close");t.addEventListener("click",function(){e.classList.add("menu_window")}),e.addEventListener("click",function(t){t.target.classList.contains("menu__item")&&!t.target.classList.contains("close")||e.classList.remove("menu_window"),t.target.classList.contains("menu__item")&&e.classList.remove("menu_window")})}(),$(".form").submit(function(t){t.preventDefault();var e,i,n=$(t.currentTarget),s=n.find("[name='name']"),o=n.find("[name='phone']"),r=n.find("[name='comment']"),a=n.find("[name='to']"),l=$("#modal"),d=l.find(".modal__content");l.removeClass("error-modal"),(e=n,[s,o,r,a].forEach(function(t){t.removeClass("input__error"),""==t.val().trim()&&t.addClass("input__error")}),0==e.find(".input__error").length)&&((i=$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:s.val(),phone:o.val(),comment:r.val(),to:a.val()}})).done(function(t){d.text(t.message)}),i.fail(function(t){var e=t.responseJSON.message;d.text(e),l.addClass("error-modal")}),i.always(function(){$.fancybox.open({src:"#modal",type:"inline"})}))}),$(".app-submit-btn").click(function(t){t.preventDefault(),$.fancybox.close()}),function(){var o=$("section"),r=$(".maincontent"),a=$(".fixed-menu__link"),l=a.find(".fixed-menu__link"),t=new MobileDetect(window.navigator.userAgent).mobile(),d=!1;o.first().addClass("section-active");function c(t,e,i){t.eq(e).addClass(i).siblings().removeClass(i)}function s(t){var e,i,n,s;t<0&&(t=0),0==d&&(d=!0,e=0<-100*(s=t)?0:-100*s,i=t,n="fixed-black","black"==o.eq(i).attr("data-theme")?a.addClass(n):a.removeClass(n),r.css({transform:"translateY(".concat(e,"%)")}),c(o,t,"section-active"),setTimeout(function(){d=!1,c(l,t,"fixed-menu__link--active")},1300))}function i(t){var e=o.filter(".section-active"),i=e.next(),n=e.prev();"next"==t&&i.length&&s(i.index()),"prev"==t&&n.length&&s(n.index())}$(window).on("wheel",function(t){var e=t.originalEvent.deltaY;0<e&&i("next"),e<0&&i("prev")}),$(window).on("keydown",function(t){var e=t.target.tagName.toLowerCase();if("input"!=e&&"textarea"!=e)switch(t.keyCode){case 38:i("prev");break;case 40:i("next")}}),$(".wrapper").on("touchmove",function(t){return t.preventDefault()}),$("[data-to]").click(function(t){t.preventDefault();var e=$(t.currentTarget).attr("data-to"),i=$("[data-id=".concat(e,"]"));s(i.index())}),t&&$("body").swipe({swipe:function(t,e){viewportScroller()["down"==e?"prev":"up"==e?"next":""]()}})}(),function(){$(".player");var s,e=$(".player__start"),i=$(".volume__pic"),n=function(){var t,e=s.getDuration();void 0!==t&&clearInterval(t),t=setInterval(function(){var t=s.getCurrentTime()/e*100;$(".player__playback-button").css({left:"".concat(t,"%")})},1e3)};$(".player__start").click(function(t){t.preventDefault();$(t.currentTarget);e.hasClass("player--paused")?s.pauseVideo():s.playVideo(),n()}),$(".player__playback").click(function(t){var e=$(t.currentTarget),i=t.originalEvent.layerX/e.width()*100,n=s.getDuration()/100*i;$(".player__playback-button").css({left:"".concat(i,"%")}),s.seekTo(n)}),$(".player__splash").click(function(t){s.playVideo()}),$(".volume__pic").click(function(t){t.preventDefault(),i.hasClass("volume__pic--nosound")?(s.unMute(),i.removeClass("volume__pic--nosound")):(s.mute(),i.addClass("volume__pic--nosound"))}),$(".volume__playback").click(function(t){var e=$(t.currentTarget),i=t.originalEvent.layerX/e.width()*100;s.getVolume();$(".volume__playback-button").css({left:"".concat(i,"%")}),s.setVolume(i)})}(),function(){var e=$(".slider").bxSlider({pager:!1,controls:!1});$(".section-bar__arrow-back").click(function(t){t.preventDefault(),e.goToPrevSlide()}),$(".section-bar__arrow-forward").click(function(t){t.preventDefault(),e.goToNextSlide()})}(),$(".interactive-avatar__link").click(function(t){t.preventDefault();var i,e=$(t.currentTarget),n=e.attr("data-open"),s=(i=n,$(".reviews__item").filter(function(t,e){return $(e).attr("data-linked-with")==i})),o=e.closest(".reviews__switcher-item");s.addClass("item-active").siblings().removeClass("item-active"),o.addClass("item__active").siblings().removeClass("item__active")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
